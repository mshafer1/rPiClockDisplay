char_map = [  # custom characters
    [0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F],  # bottom right triangle
    [0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F],  # bottom block
    [0x00, 0x00, 0x00, 0x00, 0x10, 0x1C, 0x1E, 0x1F],  # bottom left triangle
    [0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00],  # top right triangle
    [0x1F, 0x1E, 0x1C, 0x10, 0x00, 0x00, 0x00, 0x00],  # top left triangle
    [0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00],  # upper block
    [0x1F, 0x1F, 0x1E, 0x1C, 0x18, 0x18, 0x10, 0x10],  # full top right triangle
    [0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x1F, 0x1F],  # full bottom right triangle
]

# fmt: off
char_gen = [									#generate characters 0 - 9 and "Z"
#organized by columns, 3 columns for each character, 1 row for each LCD line
#		0				1				2				3				4				5				6				7				8				9			Z (10)
[0x00,0x01,0x02, 0x00,0x01,0x20, 0x00,0x01,0x02, 0x00,0x01,0x02, 0x01,0x20,0x01, 0x01,0x01,0x01, 0x00,0x01,0x02, 0x01,0x01,0x01, 0x00,0x01,0x02, 0x00,0x01,0x02, 0x01,0x01,0x01],
[0xff,0x20,0xff, 0x20,0xff,0x20, 0x00,0x01,0xff, 0x20,0x01,0xff, 0xff,0x01,0xff, 0xff,0x01,0x01, 0xff,0x01,0x02, 0x20,0x00,0x06, 0xff,0x01,0xff, 0xff,0x20,0xff, 0x20,0x00,0x06],
[0xff,0x20,0xff, 0x20,0xff,0x20, 0xff,0x20,0x20, 0x20,0x20,0xff, 0x20,0x20,0xff, 0x20,0x20,0xff, 0xff,0x20,0xff, 0x20,0xff,0x20, 0xff,0x20,0xff, 0x03,0x05,0xff, 0x07,0x20,0x20],
[0x03,0x05,0x04, 0x20,0x05,0x20, 0x05,0x05,0x05, 0x03,0x05,0x04, 0x20,0x20,0x05, 0x04,0x05,0x05, 0x03,0x05,0x04, 0x20,0x05,0x20, 0x03,0x05,0x04, 0x20,0x20,0x05, 0x05,0x05,0x05]
]
# fmt: on


# generates custom characters in CGRAM 0 - 7
# this function must be run before using big_write(big, left)
def generate_big(lcd):
    lcd.lcd_load_custom_chars(char_map)


def __test_display(lcd):
    lcd.lcd_clear()
    for i in range(8):
        lcd.lcd_write_char(i, i + 1)


# write big character at position left
def big_write(lcd, big, left):
    # if big == "Z" or big == "z":
    # 	big = 10

    lcd.lcd_display_string_pos(
        [chr(int(char_gen[0][n])) for n in range(big * 3, big * 3 + 3)], 1, left
    )
    # lcd_goto(left, 0)							#go to left position row 1 LCD 0
    # for i in range(big*3,big*3 + 3):
    # 	lcd_putch(char_gen[0][i],0)

    lcd.lcd_display_string_pos(
        [chr(char_gen[1][n]) for n in range(big * 3, big * 3 + 3)], 1, left + 1
    )
    # lcd_goto(left + 0x40, 0)					#go to left position row 2 LCD 0
    # for i in range(big*3,big*3 + 3):
    # 	lcd_putch(char_gen[1][i],0)

    lcd.lcd_display_string_pos(
        [chr(char_gen[2][n]) for n in range(big * 3, big * 3 + 3)], 2, left
    )
    # lcd_goto(left, 1)							#go to left position row 1 LCD 1
    # for i in range(big*3,big*3 + 3):
    # 	lcd_putch(char_gen[2][i],1)

    lcd.lcd_display_string_pos(
        [chr(char_gen[3][n]) for n in range(big * 3, big * 3 + 3)], 2, left + 1
    )


def _test_display_2(lcd):
    for n in range(8):
        big_write(mylcd, n, n)


if __name__ == "__main__":
    import i2c_driver
    import time

    mylcd = i2c_driver.LCD()

    generate_big(mylcd)

    __test_display(mylcd)
    time.sleep(2)

    mylcd.lcd_clear()

    _test_display_2(mylcd)

